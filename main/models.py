from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings  # Import settings to reference the custom user model

# KullanÄ±cÄ± Modeli (Yazar, EditÃ¶r, Hakem)
from django.contrib.auth.models import AbstractUser
from django.db import models


class User(AbstractUser):
    USER_TYPES = [
        ('Yazar', 'Yazar'),
        ('EditÃ¶r', 'EditÃ¶r'),
        ('Hakem', 'Hakem'),
    ]
    user_type = models.CharField(max_length=10, choices=USER_TYPES, default='Yazar')
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='custom_user_groups',  # VarsayÄ±lan 'user_set' yerine yeni bir isim veriyoruz
        blank=True
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='custom_user_permissions',  # VarsayÄ±lan 'user_set' yerine yeni bir isim veriyoruz
        blank=True
    )


# Makaleler Modeli
from django.contrib.auth.models import User
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

import os
import random
import fitz  # PyMuPDF
from django.db import models
from django.conf import settings

import os
import random
import fitz  # PyMuPDF
from django.db import models
from django.conf import settings
from django.db import models
from cryptography.fernet import Fernet
from django.conf import settings

from django.db import models
from django.conf import settings
import os
import random
import fitz  # PyMuPDF
from cryptography.fernet import Fernet


class Article(models.Model):
    STATUS_CHOICES = [
        ('GÃ¶nderildi', 'GÃ¶nderildi'),
        ('Ä°ncelemede', 'Ä°ncelemede'),
        ('Revize Edildi', 'Revize Edildi'),
        ('TamamlandÄ±', 'TamamlandÄ±'),
    ]

    id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=255)
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, limit_choices_to={'user_type': 'Yazar'})
    file = models.FileField(upload_to='articles/', blank=True, null=True)
    submission_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='GÃ¶nderildi')
    tracking_number = models.CharField(max_length=50, unique=True, blank=True)
    content = models.TextField(blank=True, null=True)  # Orijinal iÃ§erik
    encrypted_content = models.TextField(blank=True, null=True)  # Åžifreli iÃ§erik
    topic = models.CharField(max_length=255, blank=True, null=True)
    subtopic = models.CharField(max_length=255, blank=True, null=True)
    is_encrypted = models.BooleanField(default=False)  # ðŸ”¹ Yeni eklenen alan: Makale ÅŸifreli mi?


    def encrypt_content(self):
        """Makale iÃ§eriÄŸini ÅŸifrele"""
        key = settings.FERNET_KEY
        cipher_suite = Fernet(key)
        encrypted = cipher_suite.encrypt(self.content.encode())
        self.encrypted_content = encrypted.decode()
        self.is_encrypted = True  # ðŸ”¹ Åžifreleme sonrasÄ± iÅŸaretleme

    def save(self, *args, **kwargs):
        """Makale kaydedilirken ÅŸifreleme kontrolÃ¼ yapÄ±lÄ±r"""
        if self.content and not self.encrypted_content:
            self.encrypt_content()
        self.is_encrypted = bool(self.encrypted_content)  # ðŸ”¹ Åžifreleme durumunu gÃ¼ncelle
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    def generate_tracking_number(self):
        """5 basamaklÄ± benzersiz bir takip numarasÄ± oluÅŸturur."""
        while True:
            tracking_number = str(random.randint(10000, 99999))
            if not Article.objects.filter(tracking_number=tracking_number).exists():
                return tracking_number

    def extract_pdf_text_and_images(self, file_path):
        """PDF iÃ§eriÄŸini ve resimleri Ã§Ä±karÄ±r."""
        doc = fitz.open(file_path)
        text_content = ""

        for i, page in enumerate(doc):
            text_content += page.get_text("text") + "\n"

        return text_content

    def save(self, *args, **kwargs):
        """Otomatik olarak takip numarasÄ± oluÅŸturur ve PDF iÃ§eriÄŸini iÅŸler."""
        if not self.tracking_number:
            self.tracking_number = self.generate_tracking_number()

        super().save(*args, **kwargs)  # Ã–nce kaydet ki dosya yolu oluÅŸsun

        if self.file:
            file_path = self.file.path
            text_content = self.extract_pdf_text_and_images(file_path)
            self.content = text_content
            super().save(update_fields=['content'])  # Tekrar kaydet (sadece content deÄŸiÅŸecek)

        # Åžifreleme durumu gÃ¼ncelle
        self.is_encrypted = bool(self.encrypted_content)
        super().save(update_fields=['is_encrypted'])


class MainSubtopic(models.Model):
    main_topic = models.CharField(max_length=255)
    name = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.main_topic} - {self.name}"



class ArticleImage(models.Model):
    """Makale iÃ§indeki resimleri saklamak iÃ§in model"""
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name="images")
    image = models.ImageField(upload_to='images/')

    def __str__(self):
        return f"{self.article.title} - {self.image.name}"


# DeÄŸerlendirmeler Modeli
class Review(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE)
    reviewer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, limit_choices_to={'user_type': 'Hakem'})
    review_text = models.TextField()
    review_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review for {self.article.title} by {self.reviewer.username}"


# EditÃ¶r AtamalarÄ± Modeli
class Assignment(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE)
    editor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="assigned_articles", limit_choices_to={'user_type': 'EditÃ¶r'})
    reviewer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="assigned_reviews", limit_choices_to={'user_type': 'Hakem'})
    assignment_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Editor {self.editor.username} assigned {self.article.title} to {self.reviewer.username}"

# Mesajlar Modeli (Yazar ve EditÃ¶r ArasÄ±ndaki Ä°letiÅŸim)
class Message(models.Model):
    sender = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="sent_messages")
    receiver = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="received_messages")
    message_text = models.TextField()
    sent_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Message from {self.sender.username} to {self.receiver.username}"

# Makale VersiyonlarÄ± (Revizyon Takibi Ä°Ã§in)
class ArticleVersion(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name="versions")
    version_number = models.PositiveIntegerField()
    file = models.FileField(upload_to='article_versions/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('article', 'version_number')

    def _str_(self):
        return f"{self.article.title} - Version {self.version_number}"

# Loglama (KullanÄ±cÄ± Ä°ÅŸlemlerini Kaydetmek Ä°Ã§in)
class Log(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    action = models.CharField(max_length=255)
    action_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.action}"


from django.db import models

class EditorMessage(models.Model):
    sender_email = models.EmailField()  # YazarÄ±n e-posta adresi
    content = models.TextField()  # Mesaj iÃ§eriÄŸi
    sent_at = models.DateTimeField(auto_now_add=True)  # MesajÄ±n gÃ¶nderildiÄŸi zaman

    def __str__(self):
        return f"{self.sender_email} - {self.sent_at}"

class Subtopic(models.Model):
    name = models.CharField(max_length=255, unique=True)
    main_topic = models.CharField(max_length=255)  # Ana baÅŸlÄ±k: Yapay Zeka, BÃ¼yÃ¼k Veri, Siber GÃ¼venlik gibi

    def __str__(self):
        return self.name


class ReviewerSubtopic(models.Model):
    reviewer = models.ForeignKey(User, on_delete=models.CASCADE, limit_choices_to={'user_type': 'Hakem'})
    subtopic = models.ForeignKey(Subtopic, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.reviewer.username} - {self.subtopic.name}"

